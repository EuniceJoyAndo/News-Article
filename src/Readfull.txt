import * as React from 'react';
import Box from '@mui/material/Box';
import Modal from '@mui/material/Modal';
import Button from '@mui/material/Button';
import data from './MOCK_DATA.json';

const style = {
  position: 'absolute',
  top: '50%',
  left: '50%',
  transform: 'translate(-50%, -50%)',
  width: 400,
  bgcolor: 'background.paper',
  border: '2px solid #000',
  boxShadow: 24,
  pt: 2,
  px: 4,
  pb: 3,
};

function ChildModal() {
  const [open, setOpen] = React.useState(false);
  const handleOpen = () => {
    setOpen(true);
  };
  const handleClose = () => {
    setOpen(false);
  };

  return (
    <React.Fragment>
      <Button >Publish</Button>
      <Button onClick={handleOpen} color="error" >Delete</Button>
      <Modal
        open={open}
        onClose={handleClose}
        aria-labelledby="child-modal-title"
        aria-describedby="child-modal-description"
      >
        
           { data.map((article, index) => (
                <Box sx={{ ...style, width: 200 }}>
              <h2>{article.title}</h2>
              <p>{article.author} | {article.date}</p>
              <p>{article.content}</p>
              <Button onClick={handleClose}>Delete</Button>
           &rbrace;
        </Box>
           )
            )} 
    </Modal>
    </React.Fragment>
  );
}

export default function NestedModal() {
  const [open, setOpen] = React.useState(false);
  const handleOpen = () => {
    setOpen(true);
  };
  const handleClose = () => {
    setOpen(false);
  };

  return (
    <div>
      <Button onClick={handleOpen}>Read Full</Button>
      <Modal
        open={open}
        onClose={handleClose}
        aria-labelledby="parent-modal-title"
        aria-describedby="parent-modal-description"
      >
        <Box sx={{ ...style, width: 400 }}>
          <p id="parent-modal-description">
            Are you sure you want to delete?
          </p>
          <ChildModal />
        </Box>
      </Modal>
    </div>
  );
}







import './App.css';
import data from './MOCK_DATA.json';
import { useState } from 'react';
import { SelectAll } from '@mui/icons-material';
import DragIndicatorIcon from '@mui/icons-material/DragIndicator';
import DateRangeIcon from '@mui/icons-material/DateRange';
import AccountCircleIcon from '@mui/icons-material/AccountCircle';
import VisibilityIcon from '@mui/icons-material/Visibility';
import { IconButton } from '@mui/material';
import Checkbox from '@mui/material/Checkbox';
import Button from '@mui/material/Button';
import Stack from '@mui/material/Stack';
import Box from '@mui/material/Box';
import Typography from '@mui/material/Typography';
import Modal from '@mui/material/Modal';



function App() {
  const label = { inputProps: { 'aria-label': 'Checkbox demo' } };
  const [articles, setArticles] = useState();
  const [selectedAll, setSelectedAll] = useState(false);
  const [selectedItems, setSelectedItems] = useState([]);
  const [modalContent, setModalContent] = useState(null); /* Declare Modal */

  const toggleSelectAll = () => {
    if (selectedAll) {
      setSelectedItems([]);
    } else {
      setSelectedItems(data.map((_, index) => index));
    }
    setSelectedAll (!selectedAll);
  };

  const toggleSelectItem = (index) => {
    if (selectedItems.includes(index)) {
      setSelectedItems(selectedItems.filter((item) => item !== index));
    } else {
      setSelectedItems([...selectedItems, index]);
    }
  };

  const deleteSelectedItems = () => {
    const upadatedArticles = articles.filter((_, index) => !selectedItems.includes(index));
    setArticles(updateArticles);
    setSelectedItems([]);
  };

  /* Open pop-up content */
  const openModal = (content) => {
    setModalContent(content);
  };
/* Close pop-up content */
  const closeModal = () => {
    setModalContent(null);
  };


  return (
    <div className='App'>
      <header className='App-header'>
      <Stack spacing={1} direction="row">
      <Checkbox checked={toggleSelectAll} />
      <Button variant="outlined">Published</Button>
      <Button onClick={deleteSelectedItems} variant="outlined" color='error'>Delete</Button>
      </Stack>
      </header> 
      
      <main className='App-main'>
        <ul>
          {data.map((article, index) => (
            <li key={index}>
              <DragIndicatorIcon />
              <Checkbox {...label} checked={selectedItems.includes(index)} onChange={() => toggleSelectItem(index)} />
              
              <div className="article">
              <h2>{article.title}</h2>
              <p><AccountCircleIcon fontSize="small" color="success"/>{article.author} <DateRangeIcon fontSize="small" color="success"/>{article.date}</p>
              </div>
              <p>{article.content.slice(0, 100)}...
                <Button onClick={() => openModal(article)} edge="end"> <VisibilityIcon/> Read Full </Button></p>
            </li>
          )
          )
          }
        </ul>
      </main>
      </div>
  )}
      {modalContent && (
        <div className="modal">
        <div className="modal-content">
         <span className="close" onClick={closeModal}>
         &times;
         </span>
         <h2>{modalContent.title}</h2>
         <p>{modalContent.author} | {modalContent.date}</p>
         <p>{modalContent.content}</p>
  </div>
    </div>
      )}
  
export default App;


multiple select

const checkboxHandler(e) {
    let isSelected = e.target.checked;
    let value = parseInt(e.target.value);

    if(isSelected) {
      setSelectedItems([...selectedItems, value])
    } else {
        setSelectedItems((prevData) => (
          return prevData.filter((id) => {
            return id!==value
          })
    }
  }

DELETE
const handleDelete = (deletingArticle) => {
  const newArticles = data.filter((article) => article !== deletingArticle);
   setArticles(newArticles)
}